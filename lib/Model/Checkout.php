<?php
/**
 * Checkout
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Stan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Stan API
 *
 * Stan Client API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Stan\Model;

use \ArrayAccess;
use \Stan\ObjectSerializer;

/**
 * Checkout Class Doc Comment
 *
 * @category Class
 * @package  Stan
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Checkout implements ModelInterface, ArrayAccess, \JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Checkout';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'total_amount' => 'int',
        'total_amount_before_discount' => 'int',
        'subtotal_amount' => 'int',
        'discount_amount' => 'int',
        'tax_rate' => 'int',
        'discount_code' => 'string',
        'is_testmode' => 'bool',
        'line_items' => '\Stan\Model\LineItem[]',
        'merchant' => '\Stan\Model\Merchant',
        'session_id' => 'string',
        'order_id' => 'string',
        'checkout_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'total_amount' => 'int64',
        'total_amount_before_discount' => 'int64',
        'subtotal_amount' => 'int64',
        'discount_amount' => 'int64',
        'tax_rate' => 'int64',
        'discount_code' => null,
        'is_testmode' => null,
        'line_items' => null,
        'merchant' => null,
        'session_id' => null,
        'order_id' => null,
        'checkout_url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'total_amount' => 'total_amount',
        'total_amount_before_discount' => 'total_amount_before_discount',
        'subtotal_amount' => 'subtotal_amount',
        'discount_amount' => 'discount_amount',
        'tax_rate' => 'tax_rate',
        'discount_code' => 'discount_code',
        'is_testmode' => 'is_testmode',
        'line_items' => 'line_items',
        'merchant' => 'merchant',
        'session_id' => 'session_id',
        'order_id' => 'order_id',
        'checkout_url' => 'checkout_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'total_amount' => 'setTotalAmount',
        'total_amount_before_discount' => 'setTotalAmountBeforeDiscount',
        'subtotal_amount' => 'setSubtotalAmount',
        'discount_amount' => 'setDiscountAmount',
        'tax_rate' => 'setTaxRate',
        'discount_code' => 'setDiscountCode',
        'is_testmode' => 'setIsTestmode',
        'line_items' => 'setLineItems',
        'merchant' => 'setMerchant',
        'session_id' => 'setSessionId',
        'order_id' => 'setOrderId',
        'checkout_url' => 'setCheckoutUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'total_amount' => 'getTotalAmount',
        'total_amount_before_discount' => 'getTotalAmountBeforeDiscount',
        'subtotal_amount' => 'getSubtotalAmount',
        'discount_amount' => 'getDiscountAmount',
        'tax_rate' => 'getTaxRate',
        'discount_code' => 'getDiscountCode',
        'is_testmode' => 'getIsTestmode',
        'line_items' => 'getLineItems',
        'merchant' => 'getMerchant',
        'session_id' => 'getSessionId',
        'order_id' => 'getOrderId',
        'checkout_url' => 'getCheckoutUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['total_amount_before_discount'] = $data['total_amount_before_discount'] ?? null;
        $this->container['subtotal_amount'] = $data['subtotal_amount'] ?? null;
        $this->container['discount_amount'] = $data['discount_amount'] ?? null;
        $this->container['tax_rate'] = $data['tax_rate'] ?? null;
        $this->container['discount_code'] = $data['discount_code'] ?? null;
        $this->container['is_testmode'] = $data['is_testmode'] ?? null;
        $this->container['line_items'] = $data['line_items'] ?? null;
        $this->container['merchant'] = $data['merchant'] ?? null;
        $this->container['session_id'] = $data['session_id'] ?? null;
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['checkout_url'] = $data['checkout_url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return int|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param int|null $total_amount Total amount to pay
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_amount_before_discount
     *
     * @return int|null
     */
    public function getTotalAmountBeforeDiscount()
    {
        return $this->container['total_amount_before_discount'];
    }

    /**
     * Sets total_amount_before_discount
     *
     * @param int|null $total_amount_before_discount Total amount to pay before any discount
     *
     * @return self
     */
    public function setTotalAmountBeforeDiscount($total_amount_before_discount)
    {
        $this->container['total_amount_before_discount'] = $total_amount_before_discount;

        return $this;
    }

    /**
     * Gets subtotal_amount
     *
     * @return int|null
     */
    public function getSubtotalAmount()
    {
        return $this->container['subtotal_amount'];
    }

    /**
     * Sets subtotal_amount
     *
     * @param int|null $subtotal_amount Subtotal amount of this checkout
     *
     * @return self
     */
    public function setSubtotalAmount($subtotal_amount)
    {
        $this->container['subtotal_amount'] = $subtotal_amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return int|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param int|null $discount_amount Total discount applied to this checkout
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return int|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param int|null $tax_rate Tax rate
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets discount_code
     *
     * @return string|null
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param string|null $discount_code Discount code applied to this checkout
     *
     * @return self
     */
    public function setDiscountCode($discount_code)
    {
        $this->container['discount_code'] = $discount_code;

        return $this;
    }

    /**
     * Gets is_testmode
     *
     * @return bool|null
     */
    public function getIsTestmode()
    {
        return $this->container['is_testmode'];
    }

    /**
     * Sets is_testmode
     *
     * @param bool|null $is_testmode Wether the checkout is in testmode or not
     *
     * @return self
     */
    public function setIsTestmode($is_testmode)
    {
        $this->container['is_testmode'] = $is_testmode;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Stan\Model\LineItem[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Stan\Model\LineItem[]|null $line_items Items included in the checkout
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets merchant
     *
     * @return \Stan\Model\Merchant|null
     */
    public function getMerchant()
    {
        return $this->container['merchant'];
    }

    /**
     * Sets merchant
     *
     * @param \Stan\Model\Merchant|null $merchant merchant
     *
     * @return self
     */
    public function setMerchant($merchant)
    {
        $this->container['merchant'] = $merchant;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string|null
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string|null $session_id Defines a session for the current user
     *
     * @return self
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order id associated to this checkout
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets checkout_url
     *
     * @return string|null
     */
    public function getCheckoutUrl()
    {
        return $this->container['checkout_url'];
    }

    /**
     * Sets checkout_url
     *
     * @param string|null $checkout_url Checkout URL
     *
     * @return self
     */
    public function setCheckoutUrl($checkout_url)
    {
        $this->container['checkout_url'] = $checkout_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
